#!/usr/bin/env ruby

raise "environment variable ATT_SPEECH_APP_KEY must be declared" unless ENV["ATT_SPEECH_APP_KEY"]
raise "environment variable ATT_SPEECH_APP_SECRET must be declared" unless ENV["ATT_SPEECH_APP_SECRET"]

# Make sure the att-codekit has been installed then require the class
require 'att/codekit'

# Include the name spaces to reduce the code required (Optional)
include Att::Codekit

# Uncomment to set a proxy if required
# Transport.proxy("http:/proxyaddress.com:port")

# Use the app settings from developer.att.com for the following values.
# Make sure SPEECH is enabled for the app key/secret.

# Enter the value from 'App Key' field
client_id = ENV["ATT_SPEECH_APP_KEY"]

# Enter the value from 'Secret' field
client_secret = ENV["ATT_SPEECH_APP_SECRET"]

# Set the fqdn to default of https://api.att.com
fqdn = 'https://api.att.com'

# Create service for requesting an OAuth token
clientcred = Auth::ClientCred.new(fqdn,
                                  client_id,
                                  client_secret)

# Get OAuth token using the SPEECH scope
token = clientcred.createToken('SPEECH')

# Add an audio file to convert to text
# AUDIO = "/path/to/audio/file"
AUDIO = File.absolute_path(ARGV[0])

# puts AUDIO

# Create service for interacting with the SPEECH api
speech = Service::SpeechService.new(fqdn, token)

begin
  response = speech.toText(AUDIO)
rescue Service::ServiceException => e
  puts "There was an error, the api returned the following error code:"
  puts "#{e.message}"
else
  puts response.nbest.first.result
  # puts response.nbest.first["result"]
  # puts "Converted Speech with status response: #{response.status}"
  # puts ""
  # puts "NBest values:"
  # response.nbest.each do |n|
  #   puts "---------------"
  #   n.each_pair do |name, value|
  #     if name == :nlu_hypothesis
  #       puts "\tNLU Hypothesis:"
  #       value.each do |v|
  #         v.each_pair { |x, y| puts "\t\t#{x}: #{y}" }
  #       end
  #     else
  #       puts "\t#{name}: #{value}"
  #     end
  #   end
  # end
end
